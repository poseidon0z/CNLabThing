{
    "0" : {
        "ID": 1,
        "Name": "Basic Client Server Establishment",
        "Programs" : 2,
        "Names" : ["Client", "Server"],
        "Client": "#include <sys/socket.h>\n#include <sys/types.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <errno.h>\n#include <arpa/inet.h>\n\nint main() {\n\tint CreateSocket = 0, n = 0;\n\tchar dataReceived[1024];\n\tstruct sockaddr_in ipOfServer;\n\n\tmemset(dataReceived, '0', sizeof(dataReceived));\n\tif ((CreateSocket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n\t\tprintf(\"Socket not created \\n\");\n\t\treturn 1;\n\t}\n\n\tipOfServer.sin_family = AF_INET;\n\tipOfServer.sin_port = htons(2017);\n\tipOfServer.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n\tif (connect(CreateSocket, (struct sockaddr *)&ipOfServer, sizeof(ipOfServer)) < 0) {\n\t\tprintf(\"Connection failed due to port and ip problems\\n\");\n\t\treturn 1;\n\t}\n\n\twhile ((n = read(CreateSocket, dataReceived, sizeof(dataReceived) - 1)) > 0) {\n\t\tdataReceived[n] = 0;\n\t\tif (fputs(dataReceived, stdout) == EOF) {\n\t\t\tprintf(\"\\nStandard output error\");\n\t\t}\n\n\t\tprintf(\"\\n\");\n\t}\n\n\tif (n < 0) {\n\t\tprintf(\"Standard input error \\n\");\n\t}\n\n\treturn 0;\n}\n",
        "Server" : "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <time.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nint main() {\n    time_t clock;\n    char dataSending[1024];\n    int clintListn = 0, clintConnt = 0;\n    struct sockaddr_in ipOfServer;\n    clintListn = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&ipOfServer, '0', sizeof(ipOfServer));\n    memset(dataSending, '0', sizeof(dataSending));\n    ipOfServer.sin_family = AF_INET;\n    ipOfServer.sin_addr.s_addr = htonl(INADDR_ANY);\n    ipOfServer.sin_port = htons(2017);\n    bind(clintListn, (struct sockaddr *)&ipOfServer, sizeof(ipOfServer));\n    listen(clintListn, 20);\n\n    while (1) {\n        printf(\"\\n\\nHi,Iam running server.Some Client hit me\\n\");\n        clintConnt = accept(clintListn, (struct sockaddr *)NULL, NULL);\n\n        clock = time(NULL);\n        snprintf(dataSending, sizeof(dataSending), \"%.24s\\r\\n\", ctime(&clock));\n        write(clintConnt, dataSending, strlen(dataSending));\n\n        close(clintConnt);\n        sleep(1);\n    }\n\n    return 0;\n}"
    },
    "1" : {    
        "ID": 2,
        "Name": "TCP chat application",
        "Programs" : 2,
        "Names" : ["Client", "Server"],
        "Client": "#include <stdio.h>\n#include <netinet/in.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <fcntl.h>  // for open\n#include <unistd.h> // for close\n#include <string.h>\n#include <stdlib.h>\n#include <arpa/inet.h>\n\n#define MAX 80\n#define PORT 43454\n#define SA struct sockaddr\nvoid func(int sockfd)\n{\n    char buff[MAX];\n    int n;\n    for (;;)\n    {\n        bzero(buff, sizeof(buff));\n        printf(\"Enter the string : \");\n        n = 0;\n        while ((buff[n++] = getchar()) != '\\n')\n            ;\n        write(sockfd, buff, sizeof(buff));\n        bzero(buff, sizeof(buff));\n        read(sockfd, buff, sizeof(buff));\n        printf(\"From Server : %s\", buff);\n        if ((strncmp(buff, \"exit\", 4)) == 0)\n        {\n            printf(\"Client Exit...\\n\");\n            break;\n        }\n    }\n}\n\nint main()\n{\n    int sockfd, connfd;\n    struct sockaddr_in servaddr, cli;\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1)\n    {\n        printf(\"socket creation failed...\\n\");\n        exit(0);\n    }\n    else\n    {\n        printf(\"Socket successfully created..\\n\");\n        bzero(&servaddr, sizeof(servaddr));\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n        servaddr.sin_port = htons(PORT);\n    }\n    if (connect(sockfd, (SA *)&servaddr, sizeof(servaddr)) != 0)\n    {\n        printf(\"connection with the server failed...\\n\");\n        exit(0);\n    }\n    else\n    {\n        printf(\"connected to the server..\\n\");\n        func(sockfd);\n        close(sockfd);\n    }\n}",
        "Server" : "#include <stdio.h>\n#include <netinet/in.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <stdlib.h>\n#include <string.h>\n#include <fcntl.h>\n#include <unistd.h>\n\n#define MAX 80\n#define PORT 43454\n#define SA struct sockaddr\nvoid func(int sockfd)\n{\n\tchar buff[MAX];\n\tint n;\n\tfor (;;)\n\t{\n\t\tbzero(buff, MAX);\n\t\tread(sockfd, buff, sizeof(buff));\n\t\tprintf(\"From client: %s\t To client : \", buff);\n\t\tbzero(buff, MAX);\n\t\tn = 0;\n\t\twhile ((buff[n++] = getchar()) != '\\n');\n\t\twrite(sockfd, buff, sizeof(buff));\n\t\tif (strncmp(\"exit\", buff, 4) == 0)\n\t\t{\n\t\t\tprintf(\"Server Exit...\\n\");\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint sockfd, connfd, len;\n\tstruct sockaddr_in servaddr, cli;\n\tsockfd = socket(AF_INET, SOCK_STREAM, 0);\n\tif (sockfd == -1)\n\t{\n\t\tprintf(\"socket creation failed...\\n\");\n\t\texit(0);\n\t}\n\telse\n\t{\n\t\tprintf(\"Socket successfully created..\\n\");\n\t}\n\t\n\tbzero(&servaddr, sizeof(servaddr));\n\tservaddr.sin_family = AF_INET;\n\tservaddr.sin_addr.s_addr = htonl(INADDR_ANY);\n\tservaddr.sin_port = htons(PORT);\n\n\tif ((bind(sockfd, (SA *)&servaddr, sizeof(servaddr))) != 0)\n\t{\n\t\tprintf(\"socket bind failed...\\n\");\n\t\texit(0);\n\t}\n\telse\n\t{\n\t\tprintf(\"Socket successfully binded..\\n\");\n\t}\n\t\n\tif ((listen(sockfd, 5)) != 0)\n\t{\n\t\tprintf(\"Listen failed...\\n\");\n\t\texit(0);\n\t}\n\telse\n\t{\n\t\tprintf(\"Server listening..\\n\");\n\t}\n\t\n\tlen = sizeof(cli);\n\tconnfd = accept(sockfd, (SA *)&cli, (socklen_t *)&len);\n\n\tif (connfd< 0)\n\t{\n\t\tprintf(\"server acccept failed...\\n\");\n\t\texit(0);\n\t}\n\telse\n\t\tprintf(\"server acccept the client...\\n\");\n\t\n\tfunc(connfd);\n\tclose(sockfd);\n}"
    },
    "2" :{
        "ID": 3,
        "Name": "TCP sum of random numbers",
        "Programs" : 2,
        "Names" : ["Client", "Server"],
        "Client":"#include <arpa/inet.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <unistd.h>\n\n#define PORT 8080\n\nint main() {\n    int sock = 0, valread, client_fd;\n    struct sockaddr_in serv_addr;\n    char *hello = (char *)malloc(sizeof(char) * 200);\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        printf(\"\\n Socket creation error \\n\");\n        return -1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(PORT);\n\n    // Convert IPv4 and IPv6 addresses from text to binary\n    // form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        printf(\"\\nInvalid address/ Address not supported \\n\");\n        return -1;\n    }\n\n    if ((client_fd = connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr))) < 0) {\n        printf(\"\\nConnection Failed \\n\");\n        return -1;\n    }\n\n    printf(\"Connection Establishment with server was Successful!\\n\");\n\n    valread = read(sock, buffer, 1024);\n    int n1 = atoi(buffer);\n    printf(\"Server: %d\\n\", n1);\n\n    sleep(5);\n\n    valread = read(sock, buffer, 1024);\n    int n2 = atoi(buffer);\n    printf(\"Server: %d\\n\", n2);\n\n    int sum = n1 + n2;\n    printf(\"Sum = %d\\n\", sum);\n\n    printf(\"Connection closed!\\n\");\n\n    // closing the connected socket\n    close(client_fd);\n    return 0;\n}",
        "Server" :"#include <netinet/in.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <unistd.h>\n#include <time.h>\n#include <math.h>\n#include <asm-generic/socket.h>\n\n#define PORT 8080\n#define MIN_LIMIT 1\n#define MAX_LIMIT 100\n\nchar *itoa(int num, char *buffer, int base) {\n\tint current = 0;\n\tif (num == 0) {\n\t\tbuffer[current++] = '0';\n\t\tbuffer[current] = '\\0';\n\t\treturn buffer;\n\t}\n\tint num_digits = 0;\n\tif (num < 0) {\n\t\tif (base == 10) {\n\t\t\tnum_digits++;\n\t\t\tbuffer[current] = '-';\n\t\t\tcurrent++;\n\t\t\tnum *= -1;\n\t\t} else\n\t\t\treturn NULL;\n\t}\n\tnum_digits += (int)floor(log(num) / log(base)) + 1;\n\twhile (current < num_digits) {\n\t\tint base_val = (int)pow(base, num_digits - 1 - current);\n\t\tint num_val = num / base_val;\n\t\tchar value = num_val + '0';\n\t\tbuffer[current] = value;\n\t\tcurrent++;\n\t\tnum -= base_val * num_val;\n\t}\n\tbuffer[current] = '\\0';\n\treturn buffer;\n}\n\nint main() {\n\tint server_fd, new_socket, valread;\n\tstruct sockaddr_in address;\n\tint opt = 1;\n\tint addrlen = sizeof(address);\n\tchar buffer[1024] = {0};\n\tchar *hello = (char *)malloc(sizeof(char) * 200);\n\n\tif ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n\t\tperror(\"socket failed\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n\t\tperror(\"setsockopt\");\n\t\texit(EXIT_FAILURE);\n\t}\n\taddress.sin_family = AF_INET;\n\taddress.sin_addr.s_addr = INADDR_ANY;\n\taddress.sin_port = htons(PORT);\n\n\tif (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n\t\tperror(\"bind failed\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tif (listen(server_fd, 3) < 0) {\n\t\tperror(\"listen\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tif ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n\t\tperror(\"accept\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tprintf(\"Connection Establishment with client was Successful!\\n\");\n\tsrand(time(0));\n\tint num1 = (rand() % (MAX_LIMIT - MIN_LIMIT + 1)) + MIN_LIMIT;\n\tint num2 = (rand() % (MAX_LIMIT - MIN_LIMIT + 1)) + MIN_LIMIT;\n\n\titoa(num1, hello, 10);\n\tsend(new_socket, hello, strlen(hello), 0);\n\tsleep(5);\n\n\titoa(num2, hello, 10);\n\tsend(new_socket, hello, strlen(hello), 0);\n\n\tprintf(\"%d - number 1 \\n%d - number 2\\n\", num1, num2);\n\n\t// send(new_socket, hello, strlen(hello), 0);\n\n\tprintf(\"Connection closed!\\n\");\n\n\tclose(new_socket);\n\tshutdown(server_fd, SHUT_RDWR);\n\treturn 0;\n}"
    },
    "3":{
        "ID": 4,
        "Name": "Error detection and correction using hamming code",
        "Programs" : 2,
        "Names" : ["7bit", "4bit"],
        "7bit":"#include <stdio.h>\n\nint main() {\n    int data[12];\n    int dataatrec[12], c, c1, c2, c3, i, c4;\n\n    printf(\"Enter 7 bits of data one by one\\n\");\n    scanf(\"%d\", &data[3]);\n    scanf(\"%d\", &data[5]);\n    scanf(\"%d\", &data[6]);\n    scanf(\"%d\", &data[7]);\n    scanf(\"%d\", &data[9]);\n    scanf(\"%d\", &data[10]);\n    scanf(\"%d\", &data[11]);\n\n    data[1] = data[3] ^ data[5] ^ data[7] ^ data[9] ^ data[11];\n    data[2] = data[3] ^ data[6] ^ data[7] ^ data[10] ^ data[11];\n    data[4] = data[5] ^ data[6] ^ data[7];\n    data[8] = data[9] ^ data[10] ^ data[11];\n\n    printf(\"\\nEncoded data is\\n\");\n    for (i = 11; i > 0; i--) printf(\"%d\", data[i]);\n\n    printf(\"\\n\\nEnter received data bits one by one\\n\");\n    for (i = 1; i < 12; i++) scanf(\"%d\", &dataatrec[i]);\n\n    c1 = dataatrec[1] ^ dataatrec[3] ^ dataatrec[5] ^ dataatrec[7] ^ dataatrec[9] ^ dataatrec[11];\n    c2 = dataatrec[2] ^ dataatrec[3] ^ dataatrec[6] ^ dataatrec[7] ^ dataatrec[10] ^ dataatrec[11];\n    c3 = dataatrec[4] ^ dataatrec[5] ^ dataatrec[6] ^ dataatrec[7];\n    c4 = dataatrec[8] ^ dataatrec[9] ^ dataatrec[10] ^ dataatrec[11];\n    c = c4 * 8 + c3 * 4 + c2 * 2 + c1;\n\n    if (c == 0) {\n        printf(\"\\nNo error while transmission of data\\n\");\n    }\n    else {\n        printf(\"\\nError on position %d\", c);\n\n        printf(\"\\nData sent : \");\n        for (i = 11; i > 0; i--) printf(\"%d\", data[i]);\n\n        printf(\"\\nData received : \");\n        for (i = 11; i > 0; i--) printf(\"%d\", dataatrec[i]);\n        printf(\"\\nCorrect message is\\n\");\n\n        // if errorneous bit is 0 we complement it else vice versa\n        if (dataatrec[c] == 0) dataatrec[c] = 1;\n        else dataatrec[c] = 0;\n        for (i = 11; i > 0; i--) {\n            printf(\"%d\", dataatrec[i]);\n        }\n    }\n}",
        "4bit": "#include <stdio.h>\n\nint main() {\n    int data[10];\n    int dataatrec[10], c, c1, c2, c3, i;\n\n    printf(\"Enter 4 bits of data one by one\\n\");\n    scanf(\"%d\", &data[0]);\n    scanf(\"%d\", &data[1]);\n    scanf(\"%d\", &data[2]);\n    scanf(\"%d\", &data[4]);\n\n    // Calculation of even parity\n    data[6] = data[0] ^ data[2] ^ data[4];\n    data[5] = data[0] ^ data[1] ^ data[4];\n    data[3] = data[0] ^ data[1] ^ data[2];\n\n    printf(\"\\nEncoded data is\\n\");\n    for (i = 0; i < 7; i++) printf(\"%d\", data[i]);\n\n    printf(\"\\n\\nEnter received data bits one by one\\n\");\n    for (i = 0; i < 7; i++) scanf(\"%d\", &dataatrec[i]);\n\n    c1 = dataatrec[6] ^ dataatrec[4] ^ dataatrec[2] ^ dataatrec[0];\n    c2 = dataatrec[5] ^ dataatrec[4] ^ dataatrec[1] ^ dataatrec[0];\n    c3 = dataatrec[3] ^ dataatrec[2] ^ dataatrec[1] ^ dataatrec[0];\n    c = c3 * 4 + c2 * 2 + c1;\n\n    if (c == 0) {\n        printf(\"\\nNo error while transmission of data\\n\");\n    }\n    else {\n        printf(\"\\nError on position %d\", c);\n\n        printf(\"\\nData sent : \");\n        for (i = 0; i < 7; i++) printf(\"%d\", data[i]);\n\n        printf(\"\\nData received : \");\n        for (i = 0; i < 7; i++) printf(\"%d\", dataatrec[i]);\n        printf(\"\\nCorrect message is\\n\");\n\n        // if errorneous bit is 0 we complement it else vice versa\n        if (dataatrec[7 - c] == 0) dataatrec[7 - c] = 1;\n        else dataatrec[7 - c] = 0;\n        for (i = 0; i < 7; i++) {\n            printf(\"%d\", dataatrec[i]);\n        }\n    }\n}"
    },
    "4" :{
        "ID": 5,
        "Name": "CSMA/CD",
        "Programs" : 1,
        "Names" : ["CSMA"],
        "CSMA": "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <string.h>\n#include <sys/time.h>\n#include <unistd.h>\n\nint x = 0;\n\nvoid capture() {\n    pthread_exit(NULL);\n}\n\nint get() {\n    return x;\n}\n\nvoid put() {\n    x++;\n}\n\nvoid node(char *p) {\n    int name;\n    int seq1, seq2, i = 0;\n    name = atoi(p);\n    while (1) {\n        seq1 = get();\n        seq2 = get();\n        if (seq1 == seq2) {\n            put();\n            seq1 = get();\n            printf(\"station %d transmitting frame %d\\n\", name, ++i);\n            sleep(3);\n            seq2 = get();\n            if (seq1 != seq2) {\n                printf(\"station %d collision occurred %d \\n\", name, i--);\n                sleep(3);\n            }\n            else {\n                printf(\"station %d complete\\n\", name, i);\n            }\n        }\n        sleep(3);\n    }\n}\n\nint main() {\n    pthread_t t1, t2, t3;\n    int rc;\n    rc = pthread_create(&t1, NULL, (void *)node, \"1\");\n    if (rc != 0) {\n        fprintf(stderr, \"Failed to create thread 1\\n\");\n        return 1;\n    }\n    rc = pthread_create(&t2, NULL, (void *)node, \"2\");\n    if (rc != 0) {\n        fprintf(stderr, \"Failed to create thread 2\\n\");\n        return 1;\n    }\n    rc = pthread_create(&t3, NULL, (void *)node, \"3\");\n    if (rc != 0) {\n        fprintf(stderr, \"Failed to create thread 3\\n\");\n        return 1;\n    }\n    while (1) {\n        // Keep the main thread running\n    }\n    return 0;\n} "
    },
    "5":{
        "ID": 6,
        "Name": "Distance vector",
        "Programs" : 1,
        "Names" : ["distance"],
        "distance":"#include <stdio.h>\nstruct node\n{\n\tunsigned dist[20];\n\tunsigned from[20];\n} rt[10];\nint main()\n{\n\tint dmat[20][20];\n\tint n, i, j, k, count = 0;\n\tprintf(\"\\nEnter the number of nodes : \");\n\tscanf(\"%d\", &n);\n\tprintf(\"\\nEnter the cost matrix :\\n\");\n\tfor (i = 0; i < n; i++)\n\t\tfor (j = 0; j < n; j++)\n\t\t{\n\t\t\tscanf(\"%d\", &dmat[i][j]);\n\t\t\tdmat[i][i] = 0;\n\t\t\trt[i].dist[j] = dmat[i][j];\n\t\t\trt[i].from[j] = j;\n\t\t}\n\tdo\n\t{\n\t\tcount = 0;\n\t\tfor (i = 0; i < n; i++)\n\t\t\tfor (j = 0; j < n; j++)\n\t\t\t\tfor (k = 0; k < n; k++)\n\t\t\t\t\tif (rt[i].dist[j] > dmat[i][k] + rt[k].dist[j])\n\t\t\t\t\t{\n\t\t\t\t\t\trt[i].dist[j] = rt[i].dist[k] + rt[k].dist[j];\n\t\t\t\t\t\trt[i].from[j] = k;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t} while (count != 0);\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"\\n\\nState value for router %d is \\n\", i + 1);\n\t\tfor (j = 0; j < n; j++)\n\t\t{\n\t\t\tprintf(\"\\t\\nnode %d via %d Distance: %d\", j + 1, rt[i].from[j] + 1, rt[i].dist[j]);\n\t\t}\n\t}\n\tprintf(\"\\n\\n\");\n}"
    },
    "6":{
        "ID": 7,
        "Name": "OSPF",
        "Programs" : 1,
        "Names" : ["OSPF"],
        "OSPF":"#include <stdio.h> \n#include <string.h> \nint main() { \n    int count, src_router, i, j, k, w, v, min; \n    int cost_matrix[100][100], dist[100], last[100]; \n    int flag[100]; \n    printf(\"\\n Enter the no of routers\"); \n    scanf(\"%d\", &count); \n    printf(\"\\n Enter the cost matrix values:\"); \n    for (i = 0; i < count; i++) { \n        for (j = 0; j < count; j++) { \n            printf(\"\\n%d->%d:\", i, j); \n            scanf(\"%d\", &cost_matrix[i][j]); \n            if (cost_matrix[i][j] < 0) \n                cost_matrix[i][j] = 1000; \n        } \n    } \n    printf(\"\\n Enter the source router:\"); \n    scanf(\"%d\", &src_router); \n    for (v = 0; v < count; v++) { \n        flag[v] = 0; \n        last[v] = src_router; \n        dist[v] = cost_matrix[src_router][v]; \n    } \n    flag[src_router] = 1; \n    for (i = 0; i < count; i++) { \n        min = 1000; \n        for (w = 0; w < count; w++) { \n            if (!flag[w]) \n                if (dist[w] < min) { \n                    v = w; \n                    min = dist[w]; \n                } \n        } \n        flag[v] = 1; \n        for (w = 0; w < count; w++) { \n            if (!flag[w]) \n                if (min + cost_matrix[v][w] < dist[w]) { \n                    dist[w] = min + cost_matrix[v][w]; \n                    last[w] = v; \n                } \n        } \n    } \n    for (i = 0; i < count; i++) { \n        printf(\"\\n%d==>%d:Path taken:%d\", src_router, i, i); \n        w = i; \n        while (w != src_router) { \n            printf(\"\\n<--%d\", last[w]); \n            w = last[w]; \n        } \n        printf(\"\\n Shortest path cost:%d\", dist[i]); \n    } \n}"
    },
    "7":{
        "ID": 8,
        "Name": "CRC",
        "Programs" : 1,
        "Names" : ["CRC"],
        "CRC":"#include <stdio.h>\nchar data[20], div[20], temp[4], total[100];\nint i, j, datalen, divlen, len, flag = 1;\nvoid check();\nint main()\n{\n    printf(\"Enter the total bit of data:\");\n    scanf(\"%d\", &datalen);\n    printf(\"\\nEnter the total bit of divisor:\");\n    scanf(\"%d\", &divlen);\n    len = datalen + divlen - 1;\n    printf(\"\\nEnter the data:\");\n    scanf(\"%s\", &data);\n    printf(\"\\nEnter the divisor:\");\n    scanf(\"%s\", div);\n    for (i = 0; i < datalen; i++)\n    {\n        total[i] = data[i];\n        temp[i] = data[i];\n    }\n    for (i = datalen; i < len; i++)\n        total[i] = '0';\n    check();\n    for (i = 0; i < divlen; i++)\n        temp[i + datalen] = data[i];\n    printf(\"\\ntransmitted Code Word:%s\", temp);\n    printf(\"\\n\\nEnter the received code word:\");\n    scanf(\"%s\", total);\n    check();\n    for (i = 0; i < divlen - 1; i++)\n        if (data[i] == '1')\n        {\n            flag = 0;\n            break;\n        }\n    if (flag == 1)\n        printf(\"\\nsuccessful!!\");\n    else\n        printf(\"\\nreceived code word contains errors...\\n\");\n}\nvoid check()\n{\n    for (j = 0; j < divlen; j++)\n        data[j] = total[j];\n    while (j <= len)\n    {\n        if (data[0] == '1')\n            for (i = 1; i < divlen; i++)\n                data[i] = ((data[i] == div[i]) ? '0' : '1');\n        for (i = 0; i < divlen - 1; i++)\n            data[i] = data[i + 1];\n        data[i] = total[j++];\n    }\n}"
    },
    "8":{
        "ID": 9,
        "Name": "Checksum",
        "Programs" : 1,
        "Names" : ["Checksum"],
        "Checksum":"#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n\tchar a[20],b[20];\n\tchar sum[20],complement[20];\n\tint i,length;\n\n\tprintf(\"Enter first binary string\\n\");\n\tscanf(\"%s\",&a);\n\tprintf(\"Enter second binary string\\n\");\n\tscanf(\"%s\",&b);\n\n\tif(strlen(a)==strlen(b)){\n\t\tlength = strlen(a);\n\t\tchar carry='0';\n\n\t\tfor(i=length-1;i>=0;i--)\n\t\t{\n\t\t\tif(a[i]=='0' && b[i]=='0' && carry=='0')\n\t\t\t{\n\t\t\t\tsum[i]='0';\n\t\t\t\tcarry='0';\n\t\t\t}\n\t\t\telse if(a[i]=='0' && b[i]=='0' && carry=='1')\n\t\t\t{\n\t\t\t\tsum[i]='1';\n\t\t\t\tcarry='0';\n\n\t\t\t}\n\t\t\telse if(a[i]=='0' && b[i]=='1' && carry=='0')\n\t\t\t{\n\t\t\t\tsum[i]='1';\n\t\t\t\tcarry='0';\n\n\t\t\t}\n\t\t\telse if(a[i]=='0' && b[i]=='1' && carry=='1')\n\t\t\t{\n\t\t\t\tsum[i]='0';\n\t\t\t\tcarry='1';\n\n\t\t\t}\n\t\t\telse if(a[i]=='1' && b[i]=='0' && carry=='0')\n\t\t\t{\n\t\t\t\tsum[i]='1';\n\t\t\t\tcarry='0';\n\n\t\t\t}\n\t\t\telse if(a[i]=='1' && b[i]=='0' && carry=='1')\n\t\t\t{\n\t\t\t\tsum[i]='0';\n\t\t\t\tcarry='1';\n\n\t\t\t}\n\t\t\telse if(a[i]=='1' && b[i]=='1' && carry=='0')\n\t\t\t{\n\t\t\t\tsum[i]='0';\n\t\t\t\tcarry='1';\n\n\t\t\t}\n\t\t\telse if(a[i]=='1' && b[i]=='1' && carry=='1')\n\t\t\t{\n\t\t\t\tsum[i]='1';\n\t\t\t\tcarry='1';\n\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\n\t\tprintf(\"\\nSum=%c%s\",carry,sum);\n\t\tfor(i=0;i<length;i++)\n\t\t{\n\t\t\tif(sum[i]=='0')\n\t\t\t\tcomplement[i]='1';\n\t\t\telse\n\t\t\t\tcomplement[i]='0';\n\t\t}\n\n\t\tif(carry=='1')\n\t\t\tcarry='0';\n\t\telse\n\t\t\tcarry='1';\n\n\t\tprintf(\"\\nChecksum=%c%s\",carry,complement);\n\t}\n\telse {\n\t\tprintf(\"\\nWrong input strings\");\n\t}\n}"
    },
    "9":{
        "ID": 10,
        "Name": "Sliding window protocol",
        "Programs" : 1,
        "Names" : ["sliding"],
        "sliding":"#include <stdio.h>\n\nint main()\n{\n    int w, i, f, frames[50];\n\n    printf(\"Enter window size: \");\n    scanf(\"%d\", &w);\n    printf(\"Enter number of frames to transmit: \");\n    scanf(\"%d\", &f);\n\n    if (f > 50)\n    {\n        printf(\"Error: Number of frames exceeds the maximum allowed (50).\\n\");\n        return 1;\n    }\n\n    printf(\"Enter %d frames: \", f);\n    for (i = 1; i <= f; i++)\n    {\n        scanf(\"%d\", &frames[i]);\n    }\n\n    printf(\"\\nWith sliding window protocol, the frames will be sent in the following manner (assuming no corruption of frames)\\n\\n\");\n    printf(\"After sending %d frames at each stage, sender waits for acknowledgement sent by the receiver\\n\\n\", w);\n\n    for (i = 1; i <= f; i++)\n    {\n        if (i % w == 0)\n        {\n            printf(\"%d\\n\", frames[i]);\n            printf(\"Acknowledgement of above frames sent is received by sender\\n\\n\");\n        }\n        else\n        {\n            printf(\"%d \", frames[i]);\n        }\n    }\n\n    if (f % w != 0)\n    {\n        printf(\"\\nAcknowledgement of above frames sent is received by sender\\n\");\n    }\n\n    return 0;\n}"
    },
    "10" : {    
        "ID": 11,
        "Name": "Socket Program for CRC",
        "Programs" : 2,
        "Names" : ["Client", "Server"],
        "Client":"#include <stdio.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n\n#define SERV_TCP_PORT 5035\n\nint main(int argc, char *argv[])\n{\n\tint sockfd;\n\tstruct sockaddr_in serv_addr;\n\tstruct hostent *server;\n\tchar a[30], b[30], q[30], r[30], crc[10];\n\n\tsockfd = socket(AF_INET, SOCK_STREAM, 0);\n\tserv_addr.sin_family = AF_INET;\n\tserv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\tserv_addr.sin_port = htons(SERV_TCP_PORT);\n\n\tconnect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));\n\n\tprintf(\"\\nEnter the dividend:\");\n\tscanf(\"%s\", a);\n\tprintf(\"\\nEnter the divisor:\");\n\tscanf(\"%s\", b);\n\n\twrite(sockfd, a, 30);\n\twrite(sockfd, b, 30);\n\n\tprintf(\"\\n\");\n\tprintf(\"\\nServer result:\");\n\n\tread(sockfd, q, 30);\n\tread(sockfd, r, 30);\n\tread(sockfd, crc, 10);\n\n\tprintf(\"\\n\\nQuotient=%s\", q);\n\tprintf(\"\\n\\nRemainder=%s\", r);\n\tprintf(\"\\n\\nCRC values=%s\\n\", crc);\n\n\tclose(sockfd);\n\n\treturn 0;\n}",
        "Server":"#include <stdio.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n\n#define SERV_TCP_PORT 5035\n\nint main(int argc, char **argv)\n{\n\tint sockfd, newsockfd, clength;\n\tstruct sockaddr_in serv_addr, cli_addr;\n\tchar a[30], b[30], c[60] = {0}, q[30] = {0}, p[30] = {0}, np[30] = {0}, crc[10] = {0}, r[60] = {0};\n\tint n, m, i = 0, j = 0, count = 0, k = 0, l = 0, ir = 0, ip = 0, cou = 0, u = 0, w = 0, nk = 0;\n\n\tsockfd = socket(AF_INET, SOCK_STREAM, 0);\n\tserv_addr.sin_family = AF_INET;\n\tserv_addr.sin_addr.s_addr = INADDR_ANY;\n\tserv_addr.sin_port = htons(SERV_TCP_PORT);\n\n\tprintf(\"\\n Binded...\");\n\tbind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));\n\tlisten(sockfd, 5);\n\tclength = sizeof(cli_addr);\n\tnewsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clength);\n\tread(newsockfd, a, 30);\n\tread(newsockfd, b, 30);\n\tm = strlen(b);\n\tprintf(\"\\n Dividend:%s\", a);\n\tprintf(\"\\n Divisor:%s\", b);\n\tstrcpy(c, a);\n\n\tfor (i = 0; i < m - 1; i++)\n\t\tstrcat(c, \"0\");\n\tprintf(\"\\n Dividend with zero appended:%s\", c);\n\n\tfor (i = 0; i < m; i++)\n\t{\n\t\tp[k++] = c[i];\n\t\tif (k == m)\n\t\t\tq[j++] = 'l';\n\t}\n\n\tfor (i = 0; i < strlen(c);)\n\t{\n\t\tif (p[nk++] == b[l++])\n\t\t\tr[ir++] = '0';\n\t\telse\n\t\t\tr[ir++] = 'l';\n\t\tcount++;\n\n\t\tif (count == m && i < (strlen(c) - 1))\n\t\t{\n\t\t\tip = 0;\n\t\t\tfor (u = 0; u < m; u++)\n\t\t\t{\n\t\t\t\tif (r[u] == 'l')\n\t\t\t\t{\n\t\t\t\t\tfor (n = u; n < m; n++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnp[ip++] = r[n];\n\t\t\t\t\t\tr[n] = '0';\n\t\t\t\t\t\tcou++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcount = 0;\n\t\t\tnk = 0;\n\t\t\tl = 0;\n\t\t\tir = 0;\n\n\t\t\tif (cou != m)\n\t\t\t{\n\t\t\t\tif ((m - cou) == (strlen(c) - (i + 1)) || (m - cou) < (strlen(c) - (i + 1)))\n\t\t\t\t{\n\t\t\t\t\twhile (cou != m)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tnp[ip++] = c[i];\n\t\t\t\t\t\tcou++;\n\t\t\t\t\t\tw++;\n\t\t\t\t\t}\n\t\t\t\t\tstrcpy(p, np);\n\n\t\t\t\t\tfor (u = 0; u < w - 1; u++)\n\t\t\t\t\t\tq[j++] = '0';\n\n\t\t\t\t\tif (w != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ti -= m;\n\t\t\t\t\t\tw = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfor (; i + 1 < strlen(c);)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tnp[ip++] = c[i];\n\t\t\t\t\t\tw++;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ip < m)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (; ip < m;)\n\t\t\t\t\t\t\tnp[ip++] = ' ';\n\t\t\t\t\t}\n\n\t\t\t\t\tstrcpy(r, np);\n\n\t\t\t\t\tfor (u = 0; u < w - 1; u++)\n\t\t\t\t\t\tq[i++] = '0';\n\n\t\t\t\t\ti = strlen(c);\n\t\t\t\t\tw = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cou == m)\n\t\t\t{\n\t\t\t\tq[j++] = 'l';\n\t\t\t\tcou = 0;\n\t\t\t}\n\n\t\t\tip = 0;\n\t\t\tcou = 0;\n\t\t}\n\t\ti++;\n\t}\n\n\tprintf(\"\\n Quotient=%s\", q);\n\tprintf(\"\\n Remainder=%s\", r);\n\n\tfor (i = strlen(r) - (m - 1); i <= strlen(r); i++)\n\t\tcrc[w++] = r[i];\n\n\tprintf(\"\\n CRC values: %s\\n\", crc);\n\n\twrite(newsockfd, q, 30);\n\twrite(newsockfd, r, 30);\n\twrite(newsockfd, crc, 10);\n\n\tclose(sockfd);\n\treturn 0;\n}"
    }
}
